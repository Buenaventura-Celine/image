import 'dart:typed_data';

import 'package:meta/meta.dart';

import '../color/color.dart';
import '../color/format.dart';
import '../exif/exif_data.dart';
import '../filter/dither_image.dart';
import '../font/bitmap_font.dart';
import '../formats/png_encoder.dart';
import '../image/icc_profile.dart';
import '../image/image.dart';
import '../image/palette.dart';
import '../util/interpolation.dart';
import '_executor.dart'
if (dart.library.io) '_executor_io.dart'
if (dart.library.js) '_executor_html.dart';
import 'draw/draw_char_cmd.dart';
import 'draw/draw_string_cmd.dart';
import 'draw/fill_cmd.dart';
import 'filter/filter_cmd.dart';
import 'formats/decode_image_cmd.dart';
import 'formats/gif_cmd.dart';
import 'formats/jpg_cmd.dart';
import 'formats/png_cmd.dart';
import 'formats/write_to_file_cmd.dart';
import 'image/create_image_cmd.dart';
import 'image/for_each_frame_cmd.dart';
import 'transform/copy_resize_cmd.dart';

final currentFrameStack = <Image?>[];
Image? get currentFrame => currentFrameStack.isEmpty ? null
    : currentFrameStack.last;

/// Base class for commands that create, load, manipulate, and save images.
/// Commands are not executed until either the [execute] or [executeAsync]
/// methods are called.
class Command {
  Command? input;
  Command? firstSubCommand;
  Command? _subCommand;
  bool dirty = true;
  /// Output Image generated by the command.
  Image? image;
  /// Output bytes generated by the command.
  Uint8List? bytes;

  Command([this.input = null]);

  // image

  void createImage(int width, int height,
      { Format format = Format.uint8, int numChannels = 3,
        bool withPalette = false,
        Format paletteFormat = Format.uint8,
        Palette? palette, ExifData? exif,
        IccProfile? iccp, Map<String, String>? textData }) {
    subCommand = CreateImageCmd(width, height, format: format,
        numChannels: numChannels, withPalette: withPalette,
        paletteFormat: paletteFormat, palette: palette, exif: exif,
        iccp: iccp, textData: textData);
  }

  void forEachFrame(Command toExecute) {
    subCommand = ForEachFrameCmd(subCommand, toExecute);
  }

  // formats

  void decodeImageFile(String path) {
    subCommand = DecodeImageFileCmd(path);
  }

  void writeToFile(String path) {
    subCommand = WriteToFileCmd(subCommand, path);
  }

  void decodeGif(Uint8List data) {
    subCommand = DecodeGifCmd(data);
  }

  void decodeGifFile(String path) {
    subCommand = DecodeGifFileCmd(path);
  }

  void encodeGif({ int samplingFactor = 10,
      DitherKernel dither = DitherKernel.floydSteinberg,
      bool ditherSerpentine = false }) {
    subCommand = EncodeGifCmd(subCommand, samplingFactor: samplingFactor,
        dither: dither, ditherSerpentine: ditherSerpentine);
  }

  void encodeGifFile(String path, { int samplingFactor = 10,
      DitherKernel dither = DitherKernel.floydSteinberg,
      bool ditherSerpentine = false }) {
    subCommand = EncodeGifFileCmd(subCommand, path,
        samplingFactor: samplingFactor, dither: dither,
        ditherSerpentine: ditherSerpentine);
  }

  void decodeJpg(Uint8List data) {
    subCommand = DecodeJpgCmd(data);
  }

  void decodeJpgFile(String path) {
    subCommand = DecodeJpgFileCmd(path);
  }

  void encodeJpg({ int quality = 100 }) {
    subCommand = EncodeJpgCmd(subCommand, quality: quality);
  }

  void encodeJpgFile(String path, { int quality = 100 }) {
    subCommand = EncodeJpgFileCmd(subCommand, path, quality: quality);
  }

  void decodePng(Uint8List data) {
    subCommand = DecodePngCmd(data);
  }

  void decodePngFile(String path) {
    subCommand = DecodePngFileCmd(path);
  }

  void encodePng({ int level = 6, PngFilter filter = PngFilter.paeth }) {
    subCommand = EncodePngCmd(subCommand, level: level, filter: filter);
  }

  void encodePngFile(String path, { int level = 6,
      PngFilter filter = PngFilter.paeth }) {
    subCommand = EncodePngFileCmd(subCommand, path, level: level,
        filter: filter);
  }

  // draw

  void fill(Color color) {
    subCommand = FillCmd(subCommand, color);
  }

  void drawString(BitmapFont font, int x, int y,
      String char, { Color? color }) {
    subCommand = DrawStringCmd(subCommand, font, x, y, char,
        color: color);
  }

  void drawChar(BitmapFont font, int x, int y,
      String char, { Color? color }) {
    subCommand = DrawCharCmd(subCommand, font, x, y, char,
        color: color);
  }

  // filter

  void filter(FilterFunction filter) {
    subCommand = FilterCmd(subCommand, filter);
  }

  // transform

  void copyResize({ int? width, int? height,
    Interpolation interpolation = Interpolation.nearest }) {
    subCommand = CopyResizeCmd(subCommand, width: width, height: height,
        interpolation: interpolation);
  }

  void execute() {
    subCommand.executeIfDirty();
  }

  Future<void> executeAsync() async {
    final cmdOrThis = subCommand;
    if (cmdOrThis.dirty) {
      await executeCommandAsync(cmdOrThis).then((value) {
        cmdOrThis
          ..dirty = false
          ..image = value.image
          ..bytes = value.bytes;
      });
    }
  }

  Image? getImage() {
    execute();
    return subCommand.image;
  }

  Future<Image?> getImageAsync() async {
    await executeAsync();
    return subCommand.image;
  }

  Uint8List? getBytes() {
    execute();
    return subCommand.bytes;
  }

  Future<Uint8List?> getBytesAsync() async {
    await executeAsync();
    return subCommand.bytes;
  }

  @protected
  void executeIfDirty() {
    if (dirty) {
      dirty = false;
      executeCommand();
    }
  }

  @protected
  void executeCommand() { }

  @protected
  Command get subCommand => _subCommand ?? this;

  @protected
  set subCommand(Command? cmd) {
    _subCommand = cmd;
    firstSubCommand ??= cmd;
  }

  void setDirty() {
    dirty = true;
    var cmd = _subCommand;
    while (cmd != null) {
      cmd.dirty = true;
      cmd = cmd.input;
    }
  }
}
